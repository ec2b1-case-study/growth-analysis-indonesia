# 1) import modules
import pandas as pd
import numpy as np

from get_regression_coefs_general import get_regression_coefs

# For plotting
import matplotlib.pyplot as plt
import seaborn as sns 
sns.set_theme('talk', style = 'white')

import openpyxl
print(openpyxl.__version__)

# 2.1) Load dataset
data = pd.read_excel('pwt100.xlsx', sheet_name = 'Data', header = 0)

# 2.2) Clean data 

# Subset relevant columns and compute per capita real GDP
data = data.loc[:, ("country", "year", "rgdpna", "pop")]
data["rgdpna_pc"] = data["rgdpna"] / data["pop"]

# Select Indonesia as country
data = data.loc[data["country"] == "Indonesia", ("year", "rgdpna_pc")]
data = data.reset_index(drop = True)

# Subset the RGDP per capita series
ymax = 2019
ymin = 1960
Y = data.loc[np.logical_and(data["year"] <= ymax, data["year"] >= ymin), "rgdpna_pc"]
y = np.log(Y)
data = data[data["year"] >= ymin] 

# Compute separate sample sizes for the subsample used for regression and the whole sample
T = len(Y) # sample size used for regression
T_all = data["year"].max() - (ymin - 1) # number of all years in the data 

# 3.1) Additive Linear Model
# First regressor x1 is T x 1 vector of ones, second regressor x2 is the vector 1, 2, ..., T
# The dependent variable is per capital GDP in levels 

x1 = np.empty(T) 
x2 = np.empty(T) 

for t in range(T):
    x1[t] = 1.
    x2[t] = t + 1 

a_add_lin, b_add_lin = get_regression_coefs(Y, x1, x2)

# Initialise predicted values yhat 
Yhat_add_lin = np.empty(T_all)

# Create loop to compute trend for all years
for t in range(T_all):
    Yhat_add_lin[t] = a_add_lin + b_add_lin * (t + 1) # recall that Python indexing starts at 0

# Convert into log units
yhat_add_lin = np.log(Yhat_add_lin)

lw = 4

# Plotting the figure
plt.figure()
plt.plot(data['year'],np.log(data['rgdpna_pc']))
plt.plot(data['year'],yhat_add_lin)

#labels
plt.xlabel("year")
plt.ylabel("ln(GDP)")

#title
plt.title("Linear Additive: GDP & trend")

plt.show()

# 3.2) Additive Quadratic Model
# First regressor x1 is T x 1 vector of ones, second regressor x2 is the vector 1, 2, ..., T, third regressor x3 is the vector 1, 4, 9, ..., T^2
# The dependent variable is per capital GDP in levels 
x1 = np.empty(T) 
x2 = np.empty(T) 
x3 = np.empty(T)

for t in range(T):
    x1[t] = 1.
    x2[t] = t + 1 
    x3[t] = (t + 1) ** 2

a_add_quad, b_add_quad, c_add_quad = get_regression_coefs(Y, x1, x2, x3)

# Initialise predicted values yhat 
Yhat_add_quad = np.empty(T_all)

# Create loop to compute trend for all years
for t in range(T_all):
    Yhat_add_quad[t] = a_add_quad + b_add_quad * (t + 1) + c_add_quad * (t + 1) ** 2

# Convert into log units
yhat_add_quad = np.log(Yhat_add_quad)

lw = 4

# Plotting the figure
plt.figure()
plt.plot(data['year'],np.log(data['rgdpna_pc']))
plt.plot(data['year'],yhat_add_quad)

#labels
plt.xlabel("year")
plt.ylabel("ln(GDP)")

#title
plt.title("Additive Quadratic: GDP & trend")
plt.legend()

plt.show()

# 3.3) Exponential Linear Model
# First regressor x1 is T x 1 vector of ones, second regressor x2 is the vector 1, 2, ..., T, third regressor x3 is the vector exp(1), exp(2), ..., exp(T)
# The dependent variable is per capital GDP in levels 
x1 = np.empty(T) 
x2 = np.empty(T) 
x3 = np.empty(T)

for t in range(T):
    x1[t] = 1.
    x2[t] = t + 1 
    x3[t] = np.exp(t + 1)

a_exp_lin, b_exp_lin, c_exp_lin = get_regression_coefs(Y, x1, x2, x3)

Yhat_exp_lin = np.empty(T_all)

for t in range(T_all):
    Yhat_exp_lin[t] = a_exp_lin + b_exp_lin * (t + 1) + c_exp_lin * np.exp(t + 1)

# Initialise predicted values yhat 
yhat_exp_lin = np.log(Yhat_exp_lin)

lw = 4

# Plotting the figure
plt.figure()
plt.plot(data['year'],np.log(data['rgdpna_pc']))
plt.plot(data['year'],yhat_exp_lin)

#labels
plt.xlabel("year")
plt.ylabel("ln(GDP)")

#title
plt.title("Exponential Linear: GDP & trend")
plt.legend()

plt.show()

# 3.3) Exponential Quadratic Model
# First regressor x1 is T x 1 vector of ones, second regressor x2 is the vector exp(1), exp(2), ..., exp(T) third regressor x3 is the vector 1, 4, 9, ..., T^2
# The dependent variable is per capital GDP in levels 
x1 = np.empty(T) 
x2 = np.empty(T) 
x3 = np.empty(T)

for t in range(T):
    x1[t] = 1.
    x2[t] = np.exp(t + 1)
    x3[t] = (t + 1) ** 2

a_exp_quad, b_exp_quad, c_exp_quad = get_regression_coefs(Y, x1, x2, x3)

# Initialise predicted values yhat 
Yhat_exp_quad = np.empty(T_all)

for t in range(T_all):
    Yhat_exp_quad[t] = a_exp_quad + b_exp_quad * np.exp(t + 1) + c_exp_quad * (t + 1) ** 2

yhat_exp_quad = np.log(Yhat_exp_quad)

lw = 4

# Plotting the figure
plt.figure()
plt.plot(data['year'],np.log(data['rgdpna_pc']))
plt.plot(data['year'],yhat_exp_quad)

#labels
plt.xlabel("year")
plt.ylabel("ln(GDP)")

#title
plt.title("Exponential Quadratic: GDP & trend")
plt.legend()

plt.show()